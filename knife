#!/usr/bin/env bash
set -o pipefail -o errexit -o nounset

# Copyright 2024 Google Inc. All rights reserved.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

function cmd_lock() {
    echo "üöß Querying for repos"
    echo ""
    local repos=
    repos=$(bazel query "kind('deb_package_index', //external:*)" --output=label 2>/dev/null | cut -d: -f2)

    for repo in $repos; do
        echo "üîë Locking $repo"
        bazel run "@${repo}//:lock" &>/dev/null
    done
}

function find_latest_snapshot() {
    local type="$1"
    local current="$(date +%Y-%m)"
    local tmp=$(mktemp)
    while [ true ]; do
        local q=$(date -jf "%Y-%m" "2024-03" +"year=%Y&month=%m")
        if curl -fs "https://snapshot-cloudflare.debian.org/archive/debian/?$q" | grep -ohE "([0-9]+T[0-9]+Z)" > $tmp; then
            break
        fi
        echo "Could not find snapshot at $current"
        # go back 1 month
        current=$(date -v-1m -j -f "%Y-%m" "$current" +"%Y-%m")
    done
    cat $tmp | grep -ohE "([0-9]+T[0-9]+Z)" | head -n1
}

function cmd_update_snapshot() {
    echo "üßê Looking for updates... "
    latest=$(find_latest_snapshot "debian")
    latest_security=$(find_latest_snapshot "debian-security")
    if [[ -z "$latest" || -z "$latest_security" ]]; then
        echo ""
        echo "could not find any snapshots for debian or debian-security"
        exit 1
    fi 
    echo ""
    echo "üéØ Found snapshots"
    echo "   debian: $latest" 
    echo "   security: $latest_security"
    echo ""

    # if tty ask for approval
    if [ -t 1 ]; then 
        read -p "Do you want to continue? (y/n) " -n 1 -r
        sleep 0.5
        echo $'\n'
        if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
            echo "Aborting..."
        fi
    fi

    for mpath in "./common/package/"*.yaml; do
        current=$(grep -oE "debian/([0-9]+T[0-9]+Z)" $mpath | cut -d/ -f2 | head -n1)
        current_security=$(grep -oE "debian-security/([0-9]+T[0-9]+Z)" $mpath | cut -d/ -f2 | head -n1)

        if [[ "$current" == "$latest" && "$current_security" == "$latest_security" ]]; then 
            echo "üéñÔ∏è $mpath is up to date."
            continue
        fi
        echo "üóûÔ∏è $mpath"
        if [[ "$current" != "$latest" ]]; then 
            gsed -i -E "s/(debian\/)([0-9]+T[0-9]+Z)/\1$latest/" "$mpath"
            echo "   debian: $current -> $latest"
        fi 
        if [[ "$current_security" != "$latest_security" ]]; then 
            gsed -i -E "s/(debian-security\/)([0-9]+T[0-9]+Z)/\1$latest_security/" "$mpath"
            echo "   debian-security: $current_security -> $latest_security"
        fi
        echo ""
    done
    echo ""
    echo "üëå Done..."
}


function cmd_lint () {
    echo "üßπ Linting"
    echo ""
    if ! which buildifier > /dev/null; then 
        echo "üß± No buildifier executable was found."
        echo " Did you follow the ./CONTRIBUTING.md ?" 
        exit 1
    fi
    buildifier -mode=fix $(find . -name 'BUILD*' -o -name 'WORKSPACE*' -o -name '*.bzl' -type f)
    if ! which pylint > /dev/null; then 
        echo "üêç No pylint executable was found."
        echo ""
        echo "   Did you follow the ./CONTRIBUTING.md ?" 
        echo ""
        exit 1
    fi
    find . -name "*.py" | xargs pylint --disable=R,C
}


function cmd_test () {
    echo "üß™ Testing"
    echo "" 

    # TODO: why do we need python installed on the system?
    if ! which python > /dev/null && ! which python3 > /dev/null; then 
        echo "üêç No python executable was found."
        exit 1
    fi

    # Make sure python points to python3
    if which python && [[  $(python --version) != Python\ 3* ]]; then
        echo "üêç python must point to a python3, currently points to $(readlink -f "$(which python)")"
        echo ""
        echo "   Maybe run: update-alternatives --install /usr/bin/python python /usr/bin/python3"
        exit 1
    fi

    local arch=$(uname -m)

    echo "üí° only including image tests for $arch"
    echo ""

    arch_specific_targets=$(bazel query "attr(\"tags\", "$arch", \"//...\")")

    # Run all tests tagged with "amd64"
    bazel test --test_timeout=900 //... $arch_specific_targets
}


case "${1:-"~~nocmd"}" in
lock)
    cmd_lock
    ;;
update-snapshots)
    cmd_update_snapshot
    ;;
lint)
    cmd_lint
    ;;
test)
    cmd_test
    ;;
~~nocmd) # no command provided
    echo "provide a command: lock"
    exit 1
    ;;
*) # unknown command
    echo "unknown command $1"
    exit 1
    ;;
esac
